% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DAssemble.R
\name{DAssemble}
\alias{DAssemble}
\title{Ensemble models for differential analysis}
\usage{
DAssemble(dflist, combine.method = "stouffer", correction = "BH")
}
\arguments{
\item{dflist}{A list of data frames to combine. Each data frame must have columns named \code{ID} and \code{pvalue}.}

\item{combine.method}{A character string specifying the p-value combination method.
Must be one of \code{"stouffer"}, \code{"CCT"}, \code{"fisher"}, \code{"invchisq"}, \code{"binomtest"}, \code{"bonferroni"},
\code{"tippett"}, \code{"harmonic"}, or \code{"minP"}. Default is \code{"stouffer"}.}

\item{correction}{A character string specifying the method for p-value correction.
Default is \code{"BH"} (Benjamini-Hochberg). Other valid values are \code{"bonferroni"}, \code{"holm"}, \code{"hochberg"},
\code{"hommel"}, \code{"BH"}, \code{"BY"}, or \code{"none"}.}
}
\value{
A data frame with the following columns:
\itemize{
\item \code{ID}: IDs shared across all input data frames.
\item Combined p-values (as a new column named \code{pval.combined}).
\item Additional columns for corrected p-values based on the \code{correction} parameter.
}
}
\description{
\code{DAssemble}  is a lightweight implementation of the stacking method as applied to two or more
differential analysis (DA) results tables. It takes as inputs a list of DA tables with p-values
and returns a single table with omnibus p-values and q-values on a per-feature basis.
Several p-value combination methods such as Stouffer's method, CCT, and Fisher are supported.
}
\details{
\itemize{
\item The input data frames are merged by the \code{ID} column.
\item \code{pvalue} columns are validated to ensure they are numeric. Non-numeric columns are coerced
to numeric where possible; otherwise, an error is raised.
\item Rows with missing (\code{NA}) or abnormal p-values (outside the range 0 to 1) are removed.
\item The \code{combine.method} parameter determines the method used for combining p-values.
\item The \code{correction} parameter applies the specified multiple testing correction method
to the combined p-values.
}
}
\examples{
# Install packages if not already installed (uncomment if needed)
# install.packages('tidyverse')
# BiocManager::install("airway")
# BiocManager::install("edgeR")
# BiocManager::install("DESeq2")
# BiocManager::install("limma")

library(tidyverse)
library(airway)
library(edgeR)
library(DESeq2)
library(limma)
library(DAssemble)

#############
# Load Data #
#############
data("airway")

# Filter for genes with at least 10 reads in at least 10 samples
filter <- filterByExpr(airway)
filtered <- airway[filter, ]
counts_full <- assay(filtered)
sample_info <- colData(filtered)

# Subset to 1000 random genes
set.seed(123)
genes_subset <- sample(rownames(counts_full), size = 1000)
counts_sub <- counts_full[genes_subset, ]
treatment <- factor(sample_info$dex, levels = c("untrt", "trt"))

#############
# Run edgeR #
#############
dge <- DGEList(counts = counts_sub, group = treatment)
dge <- calcNormFactors(dge)
design_edgeR <- model.matrix(~ treatment)
dge <- estimateDisp(dge, design_edgeR)
fit_edgeR <- glmQLFit(dge, design_edgeR)
qlf_edgeR <- glmQLFTest(fit_edgeR, coef = 2)
res_edgeR <- topTags(qlf_edgeR, n = Inf)
res_edgeR_df <- as.data.frame(res_edgeR)

##############
# Run DESeq2 #
##############
dds <- DESeqDataSetFromMatrix(
  countData = counts_sub,
  colData = as.data.frame(sample_info),
  design = ~ dex
)
dds <- DESeq(dds)
res_DESeq2 <- results(dds, contrast = c("dex", "trt", "untrt"))
res_DESeq2_df <- as.data.frame(res_DESeq2)

#################
# Run limmavoom #
#################
design_limma <- model.matrix(~ treatment)
v <- voom(counts_sub, design_limma, plot = FALSE)
fit_limma <- lmFit(v, design_limma)
fit_limma <- eBayes(fit_limma)
res_limma <- topTable(fit_limma, coef = 2, n = Inf)
res_limma_df <- as.data.frame(res_limma)

###############################################
# Convert the results to desired input format #
###############################################
res_edgeR_df <- res_edgeR_df \%>\%
  rownames_to_column("ID") \%>\%
  dplyr::rename(pvalue = PValue)

res_DESeq2_df <- res_DESeq2_df \%>\%
  rownames_to_column("ID")

res_limma_df <- res_limma_df \%>\%
  rownames_to_column("ID") \%>\%
  dplyr::rename(pvalue = P.Value)

################
# Run DAssemble#
################
dflist <- list(res_edgeR_df, res_DESeq2_df, res_limma_df)
assemble_res <- DAssemble(dflist, combine.method = "stouffer", correction = "BH")
head(assemble_res)
}
